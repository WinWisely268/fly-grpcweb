// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MainServiceClient is the client API for MainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainServiceClient interface {
	Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Greeting, error)
	Clock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MainService_ClockClient, error)
}

type mainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMainServiceClient(cc grpc.ClientConnInterface) MainServiceClient {
	return &mainServiceClient{cc}
}

var mainServiceHelloStreamDesc = &grpc.StreamDesc{
	StreamName: "Hello",
}

func (c *mainServiceClient) Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Greeting, error) {
	out := new(Greeting)
	err := c.cc.Invoke(ctx, "/MainService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var mainServiceClockStreamDesc = &grpc.StreamDesc{
	StreamName:    "Clock",
	ServerStreams: true,
}

func (c *mainServiceClient) Clock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MainService_ClockClient, error) {
	stream, err := c.cc.NewStream(ctx, mainServiceClockStreamDesc, "/MainService/Clock", opts...)
	if err != nil {
		return nil, err
	}
	x := &mainServiceClockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MainService_ClockClient interface {
	Recv() (*Time, error)
	grpc.ClientStream
}

type mainServiceClockClient struct {
	grpc.ClientStream
}

func (x *mainServiceClockClient) Recv() (*Time, error) {
	m := new(Time)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MainServiceService is the service API for MainService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterMainServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type MainServiceService struct {
	Hello func(context.Context, *Empty) (*Greeting, error)
	Clock func(*Empty, MainService_ClockServer) error
}

func (s *MainServiceService) hello(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.Hello == nil {
		return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
	}
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/MainService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Hello(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *MainServiceService) clock(_ interface{}, stream grpc.ServerStream) error {
	if s.Clock == nil {
		return status.Errorf(codes.Unimplemented, "method Clock not implemented")
	}
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.Clock(m, &mainServiceClockServer{stream})
}

type MainService_ClockServer interface {
	Send(*Time) error
	grpc.ServerStream
}

type mainServiceClockServer struct {
	grpc.ServerStream
}

func (x *mainServiceClockServer) Send(m *Time) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterMainServiceService registers a service implementation with a gRPC server.
func RegisterMainServiceService(s grpc.ServiceRegistrar, srv *MainServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "MainService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Hello",
				Handler:    srv.hello,
			},
		},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "Clock",
				Handler:       srv.clock,
				ServerStreams: true,
			},
		},
		Metadata: "hello.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewMainServiceService creates a new MainServiceService containing the
// implemented methods of the MainService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewMainServiceService(s interface{}) *MainServiceService {
	ns := &MainServiceService{}
	if h, ok := s.(interface {
		Hello(context.Context, *Empty) (*Greeting, error)
	}); ok {
		ns.Hello = h.Hello
	}
	if h, ok := s.(interface {
		Clock(*Empty, MainService_ClockServer) error
	}); ok {
		ns.Clock = h.Clock
	}
	return ns
}

// UnstableMainServiceService is the service API for MainService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableMainServiceService interface {
	Hello(context.Context, *Empty) (*Greeting, error)
	Clock(*Empty, MainService_ClockServer) error
}
