// Code generated by protoc-gen-cobra. DO NOT EDIT.

package rpc

import (
	client "github.com/getcouragenow/protoc-gen-cobra/client"
	flag "github.com/getcouragenow/protoc-gen-cobra/flag"
	iocodec "github.com/getcouragenow/protoc-gen-cobra/iocodec"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	io "io"
)

func MainServiceClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:    cfg.CommandNamer("MainService"),
		Short:  "MainService service client",
		Long:   "",
		Hidden: false,
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_MainServiceHelloCommand(cfg),
		_MainServiceClockCommand(cfg),
	)
	return cmd
}

func _MainServiceHelloCommand(cfg *client.Config) *cobra.Command {
	req := &Empty{}

	cmd := &cobra.Command{
		Use:    cfg.CommandNamer("Hello"),
		Short:  "Hello RPC client",
		Long:   "",
		Hidden: false,
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "MainService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "MainService", "Hello"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewMainServiceClient(cc)
				v := &Empty{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.Hello(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	return cmd
}

func _MainServiceClockCommand(cfg *client.Config) *cobra.Command {
	req := &Empty{}

	cmd := &cobra.Command{
		Use:    cfg.CommandNamer("Clock"),
		Short:  "Clock RPC client",
		Long:   "",
		Hidden: false,
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "MainService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "MainService", "Clock"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewMainServiceClient(cc)
				v := &Empty{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				stm, err := cli.Clock(cmd.Context(), v)

				if err != nil {
					return err
				}

				for {
					res, err := stm.Recv()
					if err != nil {
						if err == io.EOF {
							break
						}
						return err
					}
					if err = out(res); err != nil {
						return err
					}
				}
				return nil

			})
		},
	}

	return cmd
}
